// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio, email, password
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, bio, email, password
`

type CreateAuthorParams struct {
	Name     string
	Bio      string
	Email    string
	Password string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor,
		arg.Name,
		arg.Bio,
		arg.Email,
		arg.Password,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio, email, password FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getAuthorsByEmail = `-- name: GetAuthorsByEmail :one
SELECT id, password FROM authors
WHERE email = $1
LIMIT 1
`

type GetAuthorsByEmailRow struct {
	ID       int64
	Password string
}

func (q *Queries) GetAuthorsByEmail(ctx context.Context, email pgtype.Text) (GetAuthorsByEmailRow, error) {
	row := q.db.QueryRow(ctx, getAuthorsByEmail, email)
	var i GetAuthorsByEmailRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, email, password FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
  set name = $2,
  bio = $3
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID   int64
	Name string
	Bio  pgtype.Text
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor, arg.ID, arg.Name, arg.Bio)
	return err
}
