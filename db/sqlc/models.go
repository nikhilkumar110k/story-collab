// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"time")

type StoryStatus string

const (
	StoryStatusDraft     StoryStatus = "draft"
	StoryStatusPublished StoryStatus = "published"
	StoryStatusArchived  StoryStatus = "archived"
)

func (e *StoryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StoryStatus(s)
	case string:
		*e = StoryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StoryStatus: %T", src)
	}
	return nil
}

type NullStoryStatus struct {
	StoryStatus StoryStatus
	Valid       bool // Valid is true if StoryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStoryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StoryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StoryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStoryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StoryStatus), nil
}

type Chapter struct {
	ID         string
	StoryID    string
	Title      string
	Content    string
	IsComplete bool
}

type Story struct {
	ID            string
	Title         string
	Description   string
	CoverImage    string
	AuthorID      string
	Likes         int64
	Views         int64
	PublishedDate time.Time
	LastEdited    time.Time
	StoryType     string
	Status        StoryStatus
	Genres        []string
}

type StoryCollaborator struct {
	StoryID string
	UserID  string
}

type User struct {
	ID           string
	Name         string
	Bio          string
	ProfileImage string
	Location     string
	Website      string
	Followers    int64
	Following    int64
	StoriesCount int64
	IsVerified   bool
}
