// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: story.sql

package storydb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStory = `-- name: CreateStory :one
INSERT INTO stories (
  originalstory, pulledrequests, updatedstory, author_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING story_id, originalstory, pulledrequests, updatedstory, author_id
`

type CreateStoryParams struct {
	Originalstory  string
	Pulledrequests int
	Updatedstory   string
	AuthorID       int
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) (Story, error) {
	row := q.db.QueryRow(ctx, createStory,
		arg.Originalstory,
		arg.Pulledrequests,
		arg.Updatedstory,
		arg.AuthorID,
	)
	var i Story
	err := row.Scan(
		&i.StoryID,
		&i.Originalstory,
		&i.Pulledrequests,
		&i.Updatedstory,
		&i.AuthorID,
	)
	return i, err
}

const deleteStory = `-- name: DeleteStory :exec
DELETE FROM stories
WHERE story_id = $1
`

func (q *Queries) DeleteStory(ctx context.Context, storyID int32) error {
	_, err := q.db.Exec(ctx, deleteStory, storyID)
	return err
}

const getStory = `-- name: GetStory :one
SELECT story_id, originalstory, pulledrequests, updatedstory, author_id FROM stories
WHERE story_id = $1 LIMIT 1
`

func (q *Queries) GetStory(ctx context.Context, storyID int32) (Story, error) {
	row := q.db.QueryRow(ctx, getStory, storyID)
	var i Story
	err := row.Scan(
		&i.StoryID,
		&i.Originalstory,
		&i.Pulledrequests,
		&i.Updatedstory,
		&i.AuthorID,
	)
	return i, err
}

const listStories = `-- name: ListStories :many
SELECT story_id, originalstory, pulledrequests, updatedstory, author_id FROM stories
ORDER BY story_id
`

func (q *Queries) ListStories(ctx context.Context) ([]Story, error) {
	rows, err := q.db.Query(ctx, listStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Story
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.StoryID,
			&i.Originalstory,
			&i.Pulledrequests,
			&i.Updatedstory,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStory = `-- name: UpdateStory :exec
UPDATE stories
SET originalstory = $2,
    pulledrequests = $3,
    updatedstory = $4,
    author_id = $5
WHERE story_id = $1
`

type UpdateStoryParams struct {
	StoryID        int32
	Originalstory  string
	Pulledrequests pgtype.Int4
	Updatedstory   string
	AuthorID       pgtype.Int4
}

func (q *Queries) UpdateStory(ctx context.Context, arg UpdateStoryParams) error {
	_, err := q.db.Exec(ctx, updateStory,
		arg.StoryID,
		arg.Originalstory,
		arg.Pulledrequests,
		arg.Updatedstory,
		arg.AuthorID,
	)
	return err
}
